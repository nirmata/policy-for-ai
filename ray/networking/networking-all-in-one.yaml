---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: validate-istio-virtualservice-destinationrule
  annotations:
    policies.kyverno.io/title: Validate Istio VirtualService and DestinationRule
    policies.kyverno.io/category: Istio
    policies.kyverno.io/severity: medium
    kyverno.io/kyverno-version: 1.8.0
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: VirtualService, DestinationRule
    policies.kyverno.io/description: >-
      Ensures the presence and correct configuration of Istio VirtualService and DestinationRule resources for Ray services.
      Ensures these resources are created with the appropriate routing rules and traffic policies such that it does not allow `*` wildcard hosts.
spec:
  validationFailureAction: Audit
  background: true
  rules:
  - name: validate-virtualservice-destinationrule
    match:
      any:
      - resources:
          kinds:
          - VirtualService
          - DestinationRule
    validate:
      message: "Istio VirtualService and DestinationRule must not use wildcard hosts (`*`)."
      pattern:
        spec:
          hosts:
          - "!*"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: auto-add-sidecar-injection
  annotations:
    policies.kyverno.io/title: Auto Add Sidecar Injection
    policies.kyverno.io/category: Istio
    policies.kyverno.io/severity: medium
    kyverno.io/kyverno-version: 1.8.0
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Automatically adds the `sidecar.istio.io/inject: "true"` label to pods in namespaces where Ray is deployed, ensuring Istio sidecar injection.
spec:
  rules:
  - name: add-sidecar-injection
    match:
      any:
      - resources:
          kinds:
          - Pod
    mutate:
      patchStrategicMerge:
        metadata:
          labels:
            sidecar.istio.io/inject: "true"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: validate-traffic-management-rules
  annotations:
    policies.kyverno.io/title: Validate Traffic Management Rules
    policies.kyverno.io/category: Istio
    policies.kyverno.io/severity: medium
    kyverno.io/kyverno-version: 1.8.0
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: VirtualService
    policies.kyverno.io/description: >-
      Validates that VirtualService resources for Ray components include appropriate traffic management rules, such as load balancing configurations and fault injection settings.
spec:
  validationFailureAction: Audit
  background: true
  rules:
  - name: validate-traffic-management
    match:
      any:
      - resources:
          kinds:
          - VirtualService
    validate:
      message: "VirtualService must include load balancing and fault injection settings."
      pattern:
        spec:
          http:
          - route:
            - destination:
                subset: "load-balancer"
          fault:
            abort:
              percentage:
                value: 5
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: enforce-istio-authentication
  annotations:
    policies.kyverno.io/title: Enforce Istio Authentication
    policies.kyverno.io/category: Istio
    policies.kyverno.io/severity: medium
    kyverno.io/kyverno-version: 1.8.0
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: AuthorizationPolicy, DestinationRule
    policies.kyverno.io/description: >-
      Enforces the creation of Istio AuthorizationPolicy resources for Ray services and ensures that mTLS is enabled in DestinationRule resources.
spec:
  validationFailureAction: Audit
  background: true
  rules:
  - name: enforce-authorizationpolicy
    match:
      any:
      - resources:
          kinds:
          - AuthorizationPolicy
    validate:
      message: "AuthorizationPolicies are required for Ray services."
      pattern:
        spec:
          rules:
          - to:
            - operation:
                methods: ["GET", "POST"]
  - name: enforce-mtls
    match:
      any:
      - resources:
          kinds:
          - DestinationRule
    validate:
      message: "mTLS must be enabled in DestinationRule for Ray services."
      pattern:
        spec:
          trafficPolicy:
            tls:
              mode: "ISTIO_MUTUAL"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: enforce-resource-requests-limits
  annotations:
    policies.kyverno.io/title: Enforce Resource Requests and Limits
    policies.kyverno.io/category: Istio
    policies.kyverno.io/severity: medium
    kyverno.io/kyverno-version: 1.8.0
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Enforces resource requests and limits for Istio sidecar containers in Ray pods, ensuring they have appropriate CPU and memory allocations.
spec:
  validationFailureAction: Audit
  background: true
  rules:
  - name: enforce-sidecar-resources
    match:
      any:
      - resources:
          kinds:
          - Pod
    validate:
      message: "Istio sidecar containers must have resource requests and limits defined."
      pattern:
        spec:
          containers:
          - name: istio-proxy
            resources:
              requests:
                cpu: "100m"
                memory: "128Mi"
              limits:
                cpu: "200m"
                memory: "256Mi"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: validate-retry-timeout-settings
  annotations:
    policies.kyverno.io/title: Validate Retry and Timeout Settings
    policies.kyverno.io/category: Istio
    policies.kyverno.io/severity: medium
    kyverno.io/kyverno-version: 1.8.0
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: VirtualService
    policies.kyverno.io/description: >-
      Validates that VirtualService resources for Ray services include appropriate retry and timeout settings to enhance service reliability.
spec:
  validationFailureAction: Audit
  background: true
  rules:
  - name: validate-retry-timeout
    match:
      any:
      - resources:
          kinds:
          - VirtualService
    validate:
      message: "VirtualService must include retry and timeout settings."
      pattern:
        spec:
          http:
          - retries:
              attempts: 3
              perTryTimeout: "2s"
          - timeout: "10s"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: resource-access-policies
  annotations:
    policies.kyverno.io/title: Resource Access Policies
    policies.kyverno.io/category: Security
    policies.kyverno.io/severity: high
    kyverno.io/kyverno-version: 1.8.0
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Secret, ConfigMap, Namespace
    policies.kyverno.io/description: >-
      Implement policies to define fine-grained access controls to sensitive Kubernetes resources (e.g., secrets, configmaps, namespaces).
spec:
  validationFailureAction: Audit
  background: true
  rules:
  - name: restrict-secret-access
    match:
      any:
      - resources:
          kinds:
          - Secret
    validate:
      message: "Access to Secrets is restricted to specific roles."
      deny:
        conditions:
          any:
          - key: "{{request.userInfo.roles}}"
            operator: AnyNotIn
            value:
            - "admin"
            - "devops"
  - name: restrict-configmap-access
    match:
      any:
      - resources:
          kinds:
          - ConfigMap
    validate:
      message: "Access to ConfigMaps is restricted to specific roles."
      deny:
        conditions:
          any:
          - key: "{{request.userInfo.roles}}"
            operator: AnyNotIn
            value:
            - "admin"
            - "devops"
  - name: restrict-namespace-access
    match:
      any:
      - resources:
          kinds:
          - Namespace
    validate:
      message: "Access to Namespaces is restricted to specific roles."
      deny:
        conditions:
          any:
          - key: "{{request.userInfo.roles}}"
            operator: AnyNotIn
            value:
            - "admin"
            - "devops"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: enforce-data-encryption
  annotations:
    policies.kyverno.io/title: Enforce Data Encryption
    policies.kyverno.io/category: Security
    policies.kyverno.io/severity: high
    kyverno.io/kyverno-version: 1.8.0
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Secret
    policies.kyverno.io/description: >-
      Enforce policies that ensure sensitive data is appropriately encrypted in transit and at rest.
spec:
  validationFailureAction: Audit
  background: true
  rules:
  - name: enforce-encryption
    match:
      any:
      - resources:
          kinds:
          - Secret
    validate:
      message: "Secrets must be encrypted in transit and at rest."
      deny:
        conditions:
          any:
          - key: "{{request.object.data}}"
            operator: AnyNotIn
            value:
            - "encrypted"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: enforce-least-privilege-access
  annotations:
    policies.kyverno.io/title: Enforce Least Privilege Access
    policies.kyverno.io/category: Security
    policies.kyverno.io/severity: high
    kyverno.io/kyverno-version: 1.8.0
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Role, RoleBinding, ClusterRole, ClusterRoleBinding
    policies.kyverno.io/description: >-
      Enforce policies that adhere to the principle of least privilege, ensuring users and services have access only to the resources they require.
spec:
  validationFailureAction: Audit
  background: true
  rules:
  - name: enforce-least-privilege
    match:
      any:
      - resources:
          kinds:
          - Role
          - RoleBinding
          - ClusterRole
          - ClusterRoleBinding
    validate:
      message: "Roles and RoleBindings must adhere to the principle of least privilege."
      deny:
        conditions:
          any:
          - key: "{{request.object.rules}}"
            operator: AnyIn
            value:
            - "*"
